using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;
using System.Text.RegularExpressions;


namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class TradePanelExperto : Robot
    {


        [Parameter("Vertical Position", Group = "Panel alignment", DefaultValue = VerticalAlignment.Top)]
        public VerticalAlignment PanelVerticalAlignment { get; set; }

        [Parameter("Horizontal Position", Group = "Panel alignment", DefaultValue = HorizontalAlignment.Center)]
        public HorizontalAlignment PanelHorizontalAlignment { get; set; }
        



        public bool Show_line = false;
        
        public bool Sell_Limit = false;
        
        public bool Buy_Limit = false;
        
      
        double Lot   ;
        
        double Select_Point  ;

        
        double Buy_L_R   = 0.0 ;
        double Buy_P_R   = 0.0 ;
        double Sell_L_R  = 0.0 ;
        double Sell_P_R  = 0.0 ;
         
        double StopLine ;
            
         

        public ChartHorizontalLine  SL_Line;
        

        public TextBox textboxtest;
        public TextBox perboxtest;
       
        
        public TextBlock lossblocktest;
        public TextBlock lotblocktest;


        protected override void OnStart()
        {
            
          

            var panel = new StackPanel 
            {
                Orientation = Orientation.Vertical,
                VerticalAlignment = PanelVerticalAlignment,
                HorizontalAlignment = PanelHorizontalAlignment,
                Width = 150,
                Height = 150,
                Margin = "0 3",
                BackgroundColor = "#FF3F3F3F"
            };
            
       
         
            var textBox = new TextBox 
            {
                Width = 50,
                VerticalAlignment = VerticalAlignment.Stretch,
                HorizontalAlignment = HorizontalAlignment.Stretch,
                Margin = "5 1 0 5",
          
                Text = "0.01"
            };
            textboxtest = textBox;



               

                    
            var BuyBox = new Button 
            {
                Width = 65,
                Text = "Buy",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "80 -20 0 0",
                BackgroundColor = "#96AED0"
            };
            
            var SellBox = new Button 
            {
                Width = 65,
                Text = "Sell",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "5 0 30 0",
                BackgroundColor = "#C8102E"
            };
            
          //========================
          
 
            var DelOrdBox = new Button 
            {
                Width = 65,
                Text = "Del O",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "5 5 30 0",
                BackgroundColor = "#a6a6a6"
            }; 
            
            var RevercBox = new Button 
            {
                Width = 65,
                Text = "Reverc",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "80 -20 0 5",
                BackgroundColor = "#a6a6a6"
            };
            
            var ClosePBox = new Button 
            {    
                Width = 65,
                Text = "Close ",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = " 6 5 0 5",
                BackgroundColor = "#a6a6a6"
            };
          //====================

           var checkBoxBuyLimit = new CheckBox 
            {
                Text = "BuyLimit ",
                //IsChecked = Chart.DisplaySettings.TickVolume,
                VerticalAlignment = VerticalAlignment.Top,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "80 -15 0 5 "
            };
            //===============
          var checkBoxSellLimit = new CheckBox 
            {
                Text = "SellLimit ",
                //IsChecked = Chart.DisplaySettings.TickVolume,
                VerticalAlignment = VerticalAlignment.Top,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "5 10 0 0"
            };
            
            
            //===============
            
            
 
             
         var loss = new TextBlock 
            {
                Text = "Loss:",
                FontWeight = FontWeight.DemiBold,
                Margin = "80 -20 0 5", 
                ForegroundColor = Color.White 
              };
              
               lossblocktest = loss ;
               
               //=====
            
            panel.AddChild(textBox);
         
         
            panel.AddChild(SellBox) ; panel.AddChild(BuyBox);
            
            panel.AddChild(checkBoxSellLimit);   panel.AddChild(checkBoxBuyLimit);
         
            
            panel.AddChild(DelOrdBox) ; panel.AddChild(RevercBox); panel.AddChild(ClosePBox) ;  
            panel.AddChild(loss);
             
            Chart.AddControl(panel);


              //===============
            SellBox.Click += OnSellBoxClick;
            BuyBox.Click += OnBuyBoxClick;
            
            DelOrdBox.Click += OnDelOrdBoxClick;
            
            ClosePBox.Click += OnClosePBoxClick;
            
            RevercBox.Click += OnRevercBoxClick;
            
            
            checkBoxBuyLimit.Checked += OnCheckBoxBuyLimitChecked;
            checkBoxBuyLimit.Unchecked += OnCheckBoxBuyLimitUnChecked;
            
            checkBoxSellLimit.Checked += OnCheckBoxSellLimitChecked;
            checkBoxSellLimit.Unchecked += OnCheckBoxSellLimitUnChecked;
       
            
            Chart.MouseDown += OnChartMouseDown;
            

          
        }
//+------------------------------------------------------------------+
//|     ===================   checkBoxBuyLimit   =================== |
//+------------------------------------------------------------------+
        void OnCheckBoxBuyLimitUnChecked(CheckBoxEventArgs obj)
        {
            if (obj.CheckBox.IsChecked == false)
            {
                 Buy_Limit = false ;
  
            }
        }

      

        void OnCheckBoxBuyLimitChecked(CheckBoxEventArgs obj)
        {

        if (obj.CheckBox.IsChecked == true)
            {

                 Buy_Limit = true ;
            } 

                
           }
//+------------------------------------------------------------------+
//|  ===================     checkSellBuyLimit   ==============      |
//+------------------------------------------------------------------+
        void OnCheckBoxSellLimitUnChecked(CheckBoxEventArgs obj)
        {
            if (obj.CheckBox.IsChecked == false)
            {
            
             Sell_Limit = false ;

            }
        }

        void OnCheckBoxSellLimitChecked(CheckBoxEventArgs obj)
          
          {

   
        if (obj.CheckBox.IsChecked == true)
            {

               Sell_Limit = true ;  
            } 

                
           }
                
    


//+------------------------------------------------------------------+
//|     ===================   ON TICK    ===================         |
//+------------------------------------------------------------------+  
        
    protected override  void OnTick()
        {
     
      
     var Risk  = (textboxtest.Text );

     Lot = Convert.ToDouble(Risk);
     
     Data_Check();
    

     
       }
        

//+------------------------------------------------------------------+
//|     ===================  CREATE         ===================      |
//+------------------------------------------------------------------+
 
  void OnChartMouseDown(ChartMouseEventArgs obj)
        {
         
         Select_Point = obj.YValue ;
         
         
             
      if  (!obj.AltKey && obj.CtrlKey && !obj.ShiftKey)
            {


                SL_Line = Chart.DrawHorizontalLine("Sl Line" , Select_Point ,    Color.Red);
                SL_Line.IsInteractive = true;
                SL_Line.LineStyle = LineStyle.LinesDots;
           } 
         
         //==== pending  buy 
         
    if ( obj.ShiftKey && !obj.CtrlKey && !obj.AltKey )
          {
         
         Pending_Buy();
 

           } 
             
        //==== pending  sell  
        
     if  ( obj.ShiftKey && !obj.CtrlKey && !obj.AltKey )
          {
         
         Pending_Sell();

            
           } 
                         
       //=======   Move Tp SL
       


     if  ( !obj.ShiftKey && !obj.CtrlKey && obj.AltKey )
       
       {
       
       
       SELL_TP_SL();
       
       
       BUY_SL_TP ();
       
       
     }
 
           
             
  
}
//+------------------------------------------------------------------+
//|     ===================  DATA CHECK     ===================      |
//+------------------------------------------------------------------+
void Data_Check()
  {
        

  
        //=============
        
         var lines = Chart.FindAllObjects<ChartHorizontalLine>();

            foreach (var line in lines)
            {
                if (line.Name.Contains("Sl Line") )
                {
      
                 
               StopLine =    ((line as ChartHorizontalLine).Y);
                     
               BUY_LOSS ();
               BUY_PROFIT();
      
               SELL_PROFIT();
               SELL_LOSS();
               
               //===========
               Caculat_profit();
  
                }
            }

     
     
     
     
     
            
      }
 
//+------------------------------------------------------------------+
//|     ===================  Caculat_profit     ===============      |
//+------------------------------------------------------------------+

    void Caculat_profit()
    {
 

       double result = AddNumbers(Buy_L_R , Buy_P_R , Sell_L_R , Sell_P_R);
       lossblocktest.Text = ("Loss: "+ result );
        
        
      double AddNumbers(double Buy_L_R, double Buy_P_R ,double Sell_L_R, double Sell_P_R)
       {
        return  Buy_L_R +  Buy_P_R +  Sell_L_R  + Sell_P_R    ;
        
       }

        
    }

 
//+------------------------------------------------------------------+
//|     ===================  Buy BOTTON     ===================      |
//+------------------------------------------------------------------+

      void OnBuyBoxClick(ButtonClickEventArgs obj)
        {
       
        //Buy
  
         ExecuteMarketOrder(TradeType.Buy, Symbol.Name, Symbol.QuantityToVolumeInUnits(Lot), "MyLabel " ,null,null,"Buy");
        }       
        
//+------------------------------------------------------------------+
//|     ===================  Sell BOTTON     ===================      |
//+------------------------------------------------------------------+

      void OnSellBoxClick(ButtonClickEventArgs obj)
        {

     
        //Sell
         ExecuteMarketOrder(TradeType.Sell, Symbol.Name, Symbol.QuantityToVolumeInUnits(Lot), "MyLabel ",null,null,"Sell");
       
        }       
        
//+------------------------------------------------------------------+
//|     ===================  Delorder BOTTON     =================   |
//+------------------------------------------------------------------+

      void OnDelOrdBoxClick(ButtonClickEventArgs obj)
        {
 
           CloseAllOrders();

        }       
        
//+------------------------------------------------------------------+
//|     ===================  Reverc BOTTON     ===================   |
//+------------------------------------------------------------------+

      void OnRevercBoxClick(ButtonClickEventArgs obj)
        {

         ReversePositions();
         
       
        }       
        
//+------------------------------------------------------------------+
//|     ===================  close BOTTON     ===================      |
//+------------------------------------------------------------------+

      void OnClosePBoxClick(ButtonClickEventArgs obj)
        {

     
       CloseAllPositions();
       
        }       
        
      


//+------------------------------------------------------------------+
//|     ===================  Pending_Buy         =================   |
//+------------------------------------------------------------------+ 
   void Pending_Buy()
      {
      
            if ( Buy_Limit  == true && Sell_Limit  == false   )
          
             {
           if (Select_Point > Symbol.Ask)
             {
             
             PlaceStopOrder(TradeType.Buy, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Buy");
             
             }
             else
             {
             PlaceLimitOrder(TradeType.Buy, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Buy");
             }
  
             }
      
      
      }
//+------------------------------------------------------------------+
//|     ===================  Pending_Sell        =================   |
//+------------------------------------------------------------------+ 
   void Pending_Sell()
      {
      
        if (  Sell_Limit  == true &&  Buy_Limit  == false )
          
             {
           if ( Select_Point < Symbol.Bid)
             {
             
             PlaceStopOrder(TradeType.Sell, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Sell");
             
             }
             else
             {
             PlaceLimitOrder(TradeType.Sell, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Sell");
             }
  
             }
      
      
      
      }
//+------------------------------------------------------------------+
//|     ===================  SELL LOSS           =================   |
//+------------------------------------------------------------------+ 
   void SELL_LOSS()
      {
      
      
        var  M_Profit  = 0.0;
        
        
      
      //======= Market
        foreach (var position in Positions)
             {
             
           if( position.Comment ==  "Sell"       &&  position.SymbolName == SymbolName ) 
              {
            if( Select_Point > position.EntryPrice  )
              {
             var   Vloume          = Math.Abs( position.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , position.EntryPrice  );
            var   entry_down      =  Math.Min( StopLine , position.EntryPrice  );
             
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            M_Profit          += Math.Round (   Math.Abs ( PnL - position.Commissions   ) ,2);
              
               
              }
              }
              }
         //======= Pending 
         var  P_Profit  = 0.0;
         
      foreach (var order in  PendingOrders     )
             {
             
             if( order.Comment ==  "Sell"     &&  order.SymbolName == SymbolName  )
              {
             
           if( Select_Point > order.TargetPrice  )
             { 
            var   Vloume          = Math.Abs( order.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , order.TargetPrice  );
            var   entry_down      =  Math.Min( StopLine , order.TargetPrice  );
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            P_Profit             += Math.Round (   Math.Abs ( PnL    ) ,2);
            
               
            
              }
              
              }

              }

       

              var Net_Profit =  Math.Abs( M_Profit  +  P_Profit  );

              Sell_L_R  = - Net_Profit;
     
  
            
            

      }

//+------------------------------------------------------------------+
//|     ===================   SELL PROFIT        =================   |
//+------------------------------------------------------------------+ 
   void  SELL_PROFIT()
      {
      
        var  M_Profit  = 0.0;
        
        
      
      //======= Market
        foreach (var position in Positions)
             {
             
           if( position.Comment ==  "Sell"      &&  position.SymbolName == SymbolName ) 
              {
            if( Select_Point < position.EntryPrice  )
              {
             var   Vloume          = Math.Abs( position.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , position.EntryPrice  );
            var   entry_down      =  Math.Min( StopLine , position.EntryPrice  );
             
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            M_Profit          += Math.Round (   Math.Abs ( PnL - position.Commissions   ) ,2);
              
               
              }
              }
              }

               Sell_P_R  =  M_Profit;
     

               
            
      
      
      }

//+------------------------------------------------------------------+
//|     ===================   BUY PROFIT         =================   |
//+------------------------------------------------------------------+ 
   void BUY_PROFIT()
      {
      
      
        var  M_Profit  = 0.0;
        
        
      
      //======= Market
        foreach (var position in Positions)
             {
             
           if( position.Comment ==  "Buy"      &&  position.SymbolName == SymbolName  )
              {
            if( Select_Point > position.EntryPrice  )
              {
             var   Vloume          = Math.Abs( position.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , position.EntryPrice  );
            var   entry_down      =  Math.Min( StopLine , position.EntryPrice  );
             
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            M_Profit          += Math.Round (   Math.Abs ( PnL - position.Commissions   ) ,2);
              
               
              }
              }
              }

               Buy_P_R  =  M_Profit;
     
 
              
            
      
      }

//+------------------------------------------------------------------+
//|     ===================   BUY LOSS           =================   |
//+------------------------------------------------------------------+ 
   void BUY_LOSS ()
      {
      
        var  M_Profit  = 0.0;
        
        
      
      //======= Market
        foreach (var position in Positions)
             {
             
           if( position.Comment ==  "Buy"     &&  position.SymbolName == SymbolName   )
              {
            if( Select_Point < position.EntryPrice  )
              {
             var   Vloume          = Math.Abs( position.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , position.EntryPrice  );
            var   entry_down      =  Math.Min( StopLine , position.EntryPrice  );
             
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            M_Profit          += Math.Round (   Math.Abs ( PnL - position.Commissions   ) ,2);
              
               
              }
              }
              }
         //======= Pending 
         var  P_Profit  = 0.0;
         
      foreach (var order in  PendingOrders     )
             {
             
             if( order.Comment ==  "Buy"     &&  order.SymbolName == SymbolName ) 
              {
             
           if( Select_Point < order.TargetPrice  )
             { 
            var   Vloume          = Math.Abs( order.VolumeInUnits / 100000 );

            var   entry_up        =  Math.Max( StopLine , order.TargetPrice  );
            var   entry_down      =  Math.Min( StopLine , order.TargetPrice  );
             
            var   Pip             =  Math.Abs( entry_up  -  entry_down  );
            
            var   PnL             =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
            P_Profit             += Math.Round (   Math.Abs ( PnL    ) ,2);
            
              
            
              }
              
              }

              }

       

              var Net_Profit =  Math.Abs( M_Profit  +  P_Profit  );

              Buy_L_R  = - Net_Profit;
     

              
            
            
            
    
      
       }
//+------------------------------------------------------------------+
//|     ===================   BUY_SL_TP          =================   |
//+------------------------------------------------------------------+ 
   void BUY_SL_TP ()
      {
      
        
            
         
           
          foreach (var position in Positions)
             {
             
       if( position.Comment ==  "Buy"    &&  position.SymbolName == SymbolName )  
              {
         
             if( Select_Point > Ask )
             
             { 
             
           if( Select_Point> position.EntryPrice )
             
             {
              //=========  پوزیشن در سود 
             position.ModifyTakeProfitPrice(Select_Point);
             }
           else
             {
             //=======  پوزیشن در ضرر
             
              position.ModifyTakeProfitPrice(Select_Point);
             
             }

            }
            else
            {
           if( Select_Point < position.EntryPrice )
             
             {
            //=========   پوزیشن در سود
             position.ModifyStopLossPrice(Select_Point);
             }
               else
             {
             //=======  پوزیشن در ضرر
             
             position.ModifyStopLossPrice(Select_Point);
             
             }
             
             
             
             }
       
            }
            }
            //======  Order 
            
            
            foreach (var order in  PendingOrders     )
             {
             
             if( order.Comment ==  "Buy"       &&  order.SymbolName == SymbolName )  
              
              {
          
             
           if( Select_Point > order.TargetPrice )
             
             {
             
           
             
              order.ModifyTakeProfitPrice(Select_Point); 
             
             }
             
             else
             {
             //=======  پوزیشن در سود
             
                order.ModifyStopLossPrice(Select_Point);
             
              }
            
  
              }
       
              }   
      
      
      }
//+------------------------------------------------------------------+
//|     ===================   SELL_TP_SL         =================   |
//+------------------------------------------------------------------+ 
   void SELL_TP_SL ()
      {
      
             //======  position  || 
   

     foreach (var position in  Positions     )
             {
          if( position.Comment ==  "Sell"  && position.SymbolName == SymbolName )
              {
         
         if( Select_Point > Ask )
             
             { 
             
        if( Select_Point > position.EntryPrice )
             
             {
              //========= پوزیشن در ضرر یا سر به سر  

             
             position.ModifyStopLossPrice(Select_Point);
             
             }
             else
             {
             //=======  پوزیشن در سود
             
              position.ModifyStopLossPrice(Select_Point); 
             
             }

            }
           
         else
           
           
           {
           
           if( Select_Point < position.EntryPrice )
             
             {
            //=========   پوزیشن در سود
              position.ModifyTakeProfitPrice(Select_Point);
             }
               else
             {
             //=======  پوزیشن در ضرر
             
              position.ModifyTakeProfitPrice(Select_Point);
             
             }
             
             }
             
             }
       
            } 
            
            
            //======  Order 
            
            
            foreach (var order in  PendingOrders     )
             {
             
             if( order.Comment ==  "Sell"   && order.SymbolName == SymbolName  )
              
              {
          
             
           if( Select_Point > order.TargetPrice )
             
             {
             
             order.ModifyStopLossPrice(Select_Point);
             
             }
             
             else
             {
             //=======  پوزیشن در سود
             
              order.ModifyTakeProfitPrice(Select_Point); 
             
              }
            
  
              }
       
              } 
      
      
      
      } 
//+------------------------------------------------------------------+
//|     ===================   ReversePositions      =================   |
//+------------------------------------------------------------------+ 
   void ReversePositions ()
      {

           
           var newVolume = 0.0;
           var Tradetype = 0 ;

           
           
         foreach (var position in Positions)
            {
   
      if( position.SymbolName == SymbolName  )
            {
                 
                  newVolume += position.Volume;  
                
                
               var   direction = position.TradeType == TradeType.Buy ? TradeType.Sell : TradeType.Buy;
               
                 if(direction == 0)
                 {
                 
                 Tradetype = 0 ;
                 
                 }
               
                 else
                 {
                 
                  Tradetype = 1 ;
                 
                 }

                // ClosePosition(position);
                  
                    
              }
               
              position.Close(); 
              
           }
           
           
           
          if(Tradetype == 0 )
          {
          var result = ExecuteMarketOrder(TradeType.Buy, SymbolName,newVolume,"MyLabel",null,null, "Buy"   ); 
          
          }
          else
          {
          
          var result = ExecuteMarketOrder(TradeType.Sell,  SymbolName,newVolume,"MyLabel",null,null,"Sell"   ); 
          
          }
         
          
          
          
           
//===========        
      
      }

//+------------------------------------------------------------------+
//|     ===================  CloseAllOrders    ===================   |
//+------------------------------------------------------------------+ 


        private void CloseAllOrders()
        {
            foreach (var order in PendingOrders)
            {
                if (   order.SymbolName == SymbolName)
                {
                    CancelPendingOrderAsync(order);
                }
            }
            
            Chart.RemoveObject("Sl Line");
        }
//+------------------------------------------------------------------+
//|     ===================   CloseAllPosition ===================   |
//+------------------------------------------------------------------+ 
        private void CloseAllPositions()
        {
            foreach (var position in Positions)
            {
   
            if( position.Comment ==  "Sell"   &&  position.SymbolName == SymbolName )
            {
                   position.Close(); 
            }
            
            if( position.Comment ==  "Buy"  &&  position.SymbolName == SymbolName )
            {
                     
                    position.Close(); 
            }

            
            }
        }



//+------------------------------------------------------------------+
//|     ===================   STOP  BOT        ===================   |
//+------------------------------------------------------------------+     
void Stop_bot()
   
   
    {
     
     Show_line = false;


     Chart.RemoveObject("Sl Line");
      Stop();

 
     }

 //***************************************************************************************************
    }
}
