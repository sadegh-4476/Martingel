using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;
using System.Text.RegularExpressions;


namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class TradePanelExperto : Robot
    {


        [Parameter("Vertical Position", Group = "Panel alignment", DefaultValue = VerticalAlignment.Top)]
        public VerticalAlignment PanelVerticalAlignment { get; set; }

        [Parameter("Horizontal Position", Group = "Panel alignment", DefaultValue = HorizontalAlignment.Center)]
        public HorizontalAlignment PanelHorizontalAlignment { get; set; }
        
         [Parameter("Order Comment")]
         public string OrderComment { get; set; }
         
         [Parameter("Order Label")]
         public string OrderLabel { get; set; }



        public bool Show_line = false;
        
        public bool Sell_Limit = false;
        
        public bool Buy_Limit = false;
        
      
        double Lot   ;
        
        double Select_Point  ;

        
         
         
        double StopLine ;
            
         

        public ChartHorizontalLine  SL_Line;
        

        public TextBox textboxtest;
        public TextBox perboxtest;
       
        
        public TextBlock lossblocktest;
        public TextBlock lotblocktest;


        protected override void OnStart()
        {
            
          

            var panel = new StackPanel 
            {
                Orientation = Orientation.Vertical,
                VerticalAlignment = PanelVerticalAlignment,
                HorizontalAlignment = PanelHorizontalAlignment,
                Width = 150,
                Height = 170,
                Margin = "0 3",
                BackgroundColor = "#FF3F3F3F"
            };
            
       
         
            var textBox = new TextBox 
            {
                Width = 50,
                VerticalAlignment = VerticalAlignment.Stretch,
                HorizontalAlignment = HorizontalAlignment.Stretch,
                Margin = "5 1 0 5",
          
                Text = "0.01"
            };
            textboxtest = textBox;



               

                    
            var BuyBox = new Button 
            {
                Width = 65,
                Text = "Buy",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "80 -20 0 0",
                BackgroundColor = "#96AED0"
            };
            
            var SellBox = new Button 
            {
                Width = 65,
                Text = "Sell",
                FontWeight = FontWeight.DemiBold,
                VerticalAlignment = VerticalAlignment.Bottom,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "5 0 30 0",
                BackgroundColor = "#C8102E"
            };
            
          //========================
          
           var checkBoxBuyLimit = new CheckBox 
            {
                Text = "BuyLimit ",
                //IsChecked = Chart.DisplaySettings.TickVolume,
                VerticalAlignment = VerticalAlignment.Top,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "80 -15 0 0 "
            };
            //===============
          var checkBoxSellLimit = new CheckBox 
            {
                Text = "SellLimit ",
                //IsChecked = Chart.DisplaySettings.TickVolume,
                VerticalAlignment = VerticalAlignment.Top,
                HorizontalAlignment = HorizontalAlignment.Left,
                Margin = "5 10 0 0"
            };
            
            
            //===============
            
            
         var Lot = new TextBlock 
            {
                Text = "Lot:",
                FontWeight = FontWeight.DemiBold,
                Margin = "6 0 0 7", 
                ForegroundColor = Color.White 
               };
               
               lotblocktest = Lot ;
             
         var loss = new TextBlock 
            {
                Text = "Loss:",
                FontWeight = FontWeight.DemiBold,
                Margin = "6 0 0 5", 
                ForegroundColor = Color.White 
              };
              
               lossblocktest = loss ;
               
               //=====
            
            panel.AddChild(textBox);
         
         
            panel.AddChild(SellBox) ; panel.AddChild(BuyBox);
            
            panel.AddChild(checkBoxSellLimit);   panel.AddChild(checkBoxBuyLimit);
         
            panel.AddChild(Lot); panel.AddChild(loss);


            Chart.AddControl(panel);


              //===============
            SellBox.Click += OnSellBoxClick;
            BuyBox.Click += OnBuyBoxClick;
            
            checkBoxBuyLimit.Checked += OnCheckBoxBuyLimitChecked;
            checkBoxBuyLimit.Unchecked += OnCheckBoxBuyLimitUnChecked;
            
            checkBoxSellLimit.Checked += OnCheckBoxSellLimitChecked;
            checkBoxSellLimit.Unchecked += OnCheckBoxSellLimitUnChecked;
       
            
            Chart.MouseDown += OnChartMouseDown;
            

          
        }
//+------------------------------------------------------------------+
//|     ===================   checkBoxBuyLimit   =================== |
//+------------------------------------------------------------------+
        void OnCheckBoxBuyLimitUnChecked(CheckBoxEventArgs obj)
        {
            if (obj.CheckBox.IsChecked == false)
            {
                 Buy_Limit = false ;
  
            }
        }

      

        void OnCheckBoxBuyLimitChecked(CheckBoxEventArgs obj)
        {

        if (obj.CheckBox.IsChecked == true)
            {

                 Buy_Limit = true ;
            } 

                
           }
//+------------------------------------------------------------------+
//|  ===================     checkSellBuyLimit   ==============      |
//+------------------------------------------------------------------+
        void OnCheckBoxSellLimitUnChecked(CheckBoxEventArgs obj)
        {
            if (obj.CheckBox.IsChecked == false)
            {
            
             Sell_Limit = false ;

            }
        }

        void OnCheckBoxSellLimitChecked(CheckBoxEventArgs obj)
          
          {

   
        if (obj.CheckBox.IsChecked == true)
            {

               Sell_Limit = true ;  
            } 

                
           }
                
    


//+------------------------------------------------------------------+
//|     ===================   ON TICK    ===================         |
//+------------------------------------------------------------------+  
        
    protected override  void OnTick()
        {
     
      
     var Risk  = (textboxtest.Text );

     Lot = Convert.ToDouble(Risk);
     
     Data_Check();
     
     
 
      
       }
        

//+------------------------------------------------------------------+
//|     ===================  CREATE         ===================      |
//+------------------------------------------------------------------+
 
  void OnChartMouseDown(ChartMouseEventArgs obj)
        {
         
         Select_Point = obj.YValue ;
         
         
             
      if  (!obj.AltKey && obj.CtrlKey && !obj.ShiftKey)
            {


                SL_Line = Chart.DrawHorizontalLine("Sl Line" , Select_Point ,    Color.Red);
                SL_Line.IsInteractive = true;
                SL_Line.LineStyle = LineStyle.LinesDots;
           } 
         
         //==== pending  buy 
         
    if ( obj.ShiftKey && !obj.CtrlKey && !obj.AltKey )
          {
         
         Pending_Buy();
 

           } 
             
        //==== pending  sell  
        
     if  ( obj.ShiftKey && !obj.CtrlKey && !obj.AltKey )
          {
         
         Pending_Sell();

            
           } 
                         
       //=======   Move Tp SL
       


     if  ( !obj.ShiftKey && !obj.CtrlKey && obj.AltKey )
       
       {
       
       
       SELL_TP_SL();
       
       
       
       
       
     
   
         foreach (var order in PendingOrders)
         
         if( order.Comment == "Sell" )
          {
         
              if( Select_Point > Ask )
             
             { 
             
           if( Select_Point > order.CurrentPrice )
             
             {

             
              order.ModifyStopLossPrice(Select_Point);

             }
           }
 
         
          }
     
       }

           
             
  
}
//+------------------------------------------------------------------+
//|     ===================  DATA CHECK     ===================      |
//+------------------------------------------------------------------+
void Data_Check()
  {
        

  
        //=============
        
         var lines = Chart.FindAllObjects<ChartHorizontalLine>();

            foreach (var line in lines)
            {
                if (line.Name.Contains("Sl Line") )
                {
      
                 
                    StopLine =    ((line as ChartHorizontalLine).Y);
                    
                   
                }
            }
        
       //============
    


  
  
 
       
        
     
        
     
            
      }
   
//+------------------------------------------------------------------+
//|     ===================  Buy BOTTON     ===================      |
//+------------------------------------------------------------------+

      void OnBuyBoxClick(ButtonClickEventArgs obj)
        {
       
        //Buy
  
         ExecuteMarketOrder(TradeType.Buy, Symbol.Name, Symbol.QuantityToVolumeInUnits(Lot), "MyLabel " ,null,null,"Buy");
        }       
        
//+------------------------------------------------------------------+
//|     ===================  Sell BOTTON     ===================      |
//+------------------------------------------------------------------+

      void OnSellBoxClick(ButtonClickEventArgs obj)
        {

     
        //Sell
         ExecuteMarketOrder(TradeType.Sell, Symbol.Name, Symbol.QuantityToVolumeInUnits(Lot), "MyLabel ",null,null,"Sell");
       
        }       
        
  


//+------------------------------------------------------------------+
//|     ===================  Pending_Buy         =================   |
//+------------------------------------------------------------------+ 
   void Pending_Buy()
      {
      
            if ( Buy_Limit  == true && Sell_Limit  == false   )
          
             {
           if (Select_Point > Symbol.Ask)
             {
             
             PlaceStopOrder(TradeType.Buy, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Buy");
             
             }
             else
             {
             PlaceLimitOrder(TradeType.Buy, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Buy");
             }
  
             }
      
      
      }
//+------------------------------------------------------------------+
//|     ===================  Pending_Sell        =================   |
//+------------------------------------------------------------------+ 
   void Pending_Sell()
      {
      
        if (  Sell_Limit  == true &&  Buy_Limit  == false )
          
             {
           if ( Select_Point < Symbol.Bid)
             {
             
             PlaceStopOrder(TradeType.Sell, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Sell");
             
             }
             else
             {
             PlaceLimitOrder(TradeType.Sell, SymbolName, (Lot * 100000),Select_Point, "MyLabel",null,null,null,null,"Sell");
             }
  
             }
      
      
      
      }
//+------------------------------------------------------------------+
//|     ===================  SELL LOSS           =================   |
//+------------------------------------------------------------------+ 
   void SELL_LOSS()
      {
      
      
      
      
      }

//+------------------------------------------------------------------+
//|     ===================   SELL PROFIT        =================   |
//+------------------------------------------------------------------+ 
   void  SELL_PROFIT()
      {
      
      
      
      
      }

//+------------------------------------------------------------------+
//|     ===================   BUY PROFIT         =================   |
//+------------------------------------------------------------------+ 
   void BUY_PROFIT()
      {
      
      
      
      
      }

//+------------------------------------------------------------------+
//|     ===================   BUY LOSS           =================   |
//+------------------------------------------------------------------+ 
   void BUY_LOSS ()
      {
      
      
      
      
      }
//+------------------------------------------------------------------+
//|     ===================   BUY_SL_TP          =================   |
//+------------------------------------------------------------------+ 
   void BUY_SL_TP ()
      {
      
          var Buypositions = Positions.FindAll("MyLabel ",SymbolName,TradeType.Buy);
            
         
           
          foreach (var position in Buypositions)
             {
             if( Select_Point > Ask )
             
             { 
             
           if( Select_Point> position.EntryPrice )
             
             {
              //=========  پوزیشن در سود 
             position.ModifyTakeProfitPrice(Select_Point);
             }
           else
             {
             //=======  پوزیشن در ضرر
             
              position.ModifyTakeProfitPrice(Select_Point);
             
             }

            }
            else
            {
           if( Select_Point < position.EntryPrice )
             
             {
            //=========   پوزیشن در سود
             position.ModifyStopLossPrice(Select_Point);
             }
               else
             {
             //=======  پوزیشن در ضرر
             
             position.ModifyStopLossPrice(Select_Point);
             
             }
             
             
             
             }
       
            }
      
      
      }
//+------------------------------------------------------------------+
//|     ===================   SELL_TP_SL         =================   |
//+------------------------------------------------------------------+ 
   void SELL_TP_SL ()
      {
      
   
      
             foreach (var position in  Positions)
             {
              if( position.Comment ==  "Sell"  )
              {
         
             if( Select_Point > Ask )
             
             { 
             
           if( Select_Point > position.EntryPrice )
             
             {
              //========= پوزیشن در ضرر یا سر به سر  

             
             position.ModifyStopLossPrice(Select_Point);
             
             }
             else
             {
             //=======  پوزیشن در سود
             
              position.ModifyStopLossPrice(Select_Point); 
             
             }

            }
            else
            {
           if( Select_Point < position.EntryPrice )
             
             {
            //=========   پوزیشن در سود
              position.ModifyTakeProfitPrice(Select_Point);
             }
               else
             {
             //=======  پوزیشن در ضرر
             
              position.ModifyTakeProfitPrice(Select_Point);
             
             }
             
             }
             
             }
       
            } 
      
      
      } 
//+------------------------------------------------------------------+
//|     ===================   FindPositions      =================   |
//+------------------------------------------------------------------+ 
   void FindPositions ()
      {
      
             
         //var Allpositions = Positions.FindAll("MyLabel ",SymbolName);
       
         var Profit            = 0.0 ;
        
             foreach (var Position in Positions)
             {
             
           var   Vloume              = Math.Abs( Position.VolumeInUnits / 100000 );
             
           var   EntryPrice          =  Position.EntryPrice;
           var Point                =  StopLine ;
           var  EntryCommissions    =   Math.Abs( Position.Commissions  +  Position.Commissions );
            

           var entry_up        =  Math.Max( Point , EntryPrice  );
           var entry_down      =  Math.Min( Point , EntryPrice  );
             
           var  Pip                 =  Math.Abs( entry_up  -  entry_down  );
            
           var   PnL                 =   Math.Abs ( ((Vloume  * Pip) / Symbol.PipValue) * 10);
          
           Profit          += Math.Round (   Math.Abs ( PnL - EntryCommissions    ) ,2);
       
             lossblocktest.Text = ("Loss: "+Profit );

             }
      
      
      }

//+------------------------------------------------------------------+
//|     ===================  CloseAllOrders    ===================   |
//+------------------------------------------------------------------+ 


        private void CloseAllOrders()
        {
            foreach (var order in PendingOrders)
            {
                if (   order.SymbolName == SymbolName)
                {
                    CancelPendingOrderAsync(order);
                }
            }
        }
//+------------------------------------------------------------------+
//|     ===================   CloseAllPosition ===================   |
//+------------------------------------------------------------------+ 
        private void CloseAllPositions()
        {
            foreach (var position in Positions)
            {
                if (position.Label == "MyLable" && position.SymbolName == SymbolName && position != null)
                {
                    ClosePositionAsync(position);
                }
            }
        }



//+------------------------------------------------------------------+
//|     ===================   STOP  BOT        ===================   |
//+------------------------------------------------------------------+     
void Stop_bot()
   
   
    {
     
     Show_line = false;


     Chart.RemoveObject("Sl Line");
      Stop();

 
     }

 //***************************************************************************************************
    }
}
